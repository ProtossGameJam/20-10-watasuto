<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>minigames[0] = '용건만 간단히';
minigameRooms[0] = r_callbox_game;
minigames[1] = '실시간 채팅 관리';
minigameRooms[1] = r_chatting_game;
if (global.week &gt;= 3) {
    minigames[2] = '악플러 머리 꽁하고 때리기 게임';
    minigameRooms[2] = r_hammer_game;
}
if (global.week &gt;= 5) {
    minigames[3] = '언 - 빡싱 게임';
    minigameRooms[3] = r_unboxing_game;
}
minigames[array_length_1d(minigames)] = 'Q&amp;A';
minigameRooms[array_length_1d(minigameRooms)] = r_qna_game;

// sx = room_width / 2
sy = room_height / 2;

dx = round(room_width / 2);
dy = sy;

//ex = room_width / 2;
ey = 2;

time = 0;
time_max = 45;

each_height = 128 + 15;

hover = -1;

// scroll
touch = 0;
scrolling = 0;
scrolled_y = 0;
scroll_y_speed = 0;
scrolling_height = each_height * array_length_1d(minigames);
scroll_area_height = 415;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// touch action

var click = device_mouse_check_button_pressed(0, mb_left);
var unclick = device_mouse_check_button_released(0, mb_left);
var _mouse_x = device_mouse_x(0);
var _mouse_y = device_mouse_y(0);


if click &amp;&amp; point_in_rectangle(_mouse_x, _mouse_y, dx - 235, dy + 215, dx + 235, dy + 215 + 415) {
    touch = 1;
    scroll_sx = _mouse_x;
    scroll_sy = _mouse_y;
}

if (touch) {
    scroll_y_speed = 0;
    touch++;
    
    if (!scrolling &amp;&amp; (point_distance(scroll_sx, scroll_sy, _mouse_x, _mouse_y) &gt; 8 || touch &gt; 10)) {
        scrolling = 1;
        hover = -1;
        _mouse_pre_y = _mouse_y;
    }
}

if (scrolling) {
    scroll_y_speed = _mouse_pre_y - _mouse_y;
    
    if (scrolled_y &lt; scroll_area_height - scrolling_height || 0 &lt; scrolled_y) {
        scroll_y_speed /= 3;
    }
    
    _mouse_pre_y = _mouse_y;
}else {
    scroll_y_speed /= 2;
    
    if (0 &lt; scrolled_y) {
        scroll_y_speed = 0;
        scrolled_y /= 2;
    }else if (scrolled_y &lt; scroll_area_height - scrolling_height) {
        scroll_y_speed = 0;
        if (scroll_area_height &lt; scrolling_height) {
            scrolled_y += ((scroll_area_height - scrolling_height) - scrolled_y) / 2;
        }else {
            scrolled_y /= 2;
        }
    }
    
}

if (!scrolling) {
    for(var i = 0; i &lt; array_length_1d(minigames); i++) {
        if point_in_rectangle(_mouse_x, _mouse_y, dx - 235, round(scrolled_y) + dy + 220 + each_height * i, dx - 107 + 335 + 5, round(scrolled_y) + dy + 225 + each_height * i + each_height - 10) {
            hover = i;
            break;
        }
        hover = -1;
    }
}

if (hover &gt; -1 &amp;&amp; !scrolling &amp;&amp; unclick) {
    room_change(minigameRooms[hover]);
}

if (touch &amp;&amp; unclick) {
    touch = 0;
    scrolling = 0;
}

 scrolled_y -= scroll_y_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// easing draw coordinates

if (instance_exists(o_room_changer)) exit;

dy = sy + round((ey - sy) * ease_out_quintic(time/time_max));

time = min(time + 1, time_max);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw ui
draw_set_alpha(time/time_max);
draw_sprite(spr_schedule, 0, dx, dy);

shader_set_clip_rect(dx - 235, dy + 215, dx + 235, dy + 215 + scroll_area_height);

for(var i = 0; i &lt; array_length_1d(minigames); i++) {

    if (hover == i) {
        draw_set_alpha(0.05);
        draw_set_color($3e3e3e);
        draw_rectangle(dx - 235, round(scrolled_y) + dy + 220 + each_height * i, dx - 107 + 335 + 5, round(scrolled_y) + dy + 225 + each_height * i + each_height - 10, 0);
    }else {
        draw_sprite_ext(spr_stage_explain, 0, dx - 225 + 128, round(scrolled_y) + dy + 225 + each_height * i + 62, 1, 42, 0, c_white, time/time_max);
    }
    
    draw_set_alpha(time/time_max);
    
    draw_set_font(f_namsan_general);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_color($212121);
    draw_text(dx - 225 + 128 + 10, round(scrolled_y) + dy + 225 + each_height * i + 62 + 10, "대충 설명설명설명 이러이러해서 저러저러");
    
    draw_window(spr_stage_title, 0, dx - 225 + 128 - 10, round(scrolled_y) + dy + 225 + each_height * i + 20, 280, 42);
    draw_set_color($efefef);
    draw_text_outline(dx - 225 + 128 + 10, round(scrolled_y) + dy + 225 + each_height * i + 20 + 10, minigames[i], 2, $94941c, 4);
    
    draw_window(spr_stage_thumb, 0, dx - 225, round(scrolled_y) + dy + 225 + each_height * i, 128, 128);
}
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
