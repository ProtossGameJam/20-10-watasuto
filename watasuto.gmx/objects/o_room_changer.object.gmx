<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer = 0;
timer_max = 30;

pass = 0;
pass_alpha = 0;

phase = 0;
phase_delay = 30;

dy = -15;

x = choose(0, room_width);
y = choose(0, room_height);

x_end = room_width - median(0, x, room_width);
y_end = room_height - median(0, y, room_height);

size_end = point_distance(x,y,x_end,y_end);

image_angle = point_direction(x,y,x_end,y_end);
image_yscale = 2500;

background_shift_x = 0;
background_shift_y = 0;

surf = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer += (!phase || pass || timer &lt; 0);

if timer &gt; timer_max { 
    if !phase {
        phase = 1;
        timer = -phase_delay;
        x = x_end;
        y = y_end;
        image_angle += 180;
        
        room_goto(action)
        
    }else {
        instance_destroy();
    }
}

if !phase {
    image_xscale = ease_in_quartic(max(timer, 0)/timer_max) * size_end;
    dy = -20 + ease_in_quartic(max(timer, 0)/timer_max) * 20;
}else{
    image_xscale = size_end - ease_out_quartic(max(timer, 0)/timer_max) * size_end;
    dy = ease_in_quartic(max(timer, 0)/timer_max) * -20;
    
    if ((device_mouse_check_button_pressed(0, mb_left) || keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_enter)) &amp;&amp; timer = 0) {
        pass = 1;
        var bgm = get_bgm(room);
        if (!audio_is_playing(bgm)) {
            audio_play_sound(bgm, 0, true);
            audio_sound_gain(bgm, 1, 30);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf = surface_make_clip( surf, room_width, room_height);
draw_sprite_ext(spr_long_part,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha);
surface_reset_target();

shader_set_clip_mask( surf, 0, 0);
draw_set_alpha(1);
draw_sprite(spr_dyk_backgorund, 0, 0, 0);
draw_set_alpha(0.05);
draw_background_tiled(bg_dyk_loop, background_shift_x, background_shift_y);
if (!phase) {
    draw_set_alpha(0.5 + max(timer, 0)/(timer_max * 2));
}else {
    draw_set_alpha(1 - max(timer * 2, 0)/(timer_max));
}

background_shift_x += lengthdir_x(0.5,image_angle-phase*180);
background_shift_y += lengthdir_y(0.5,image_angle-phase*180);
draw_sprite(spr_dyk_character, 0, room_width / 2, dy + room_height / 2 + 45);

draw_set_halign(fa_middle);
draw_set_valign(fa_top);
draw_set_color($f2f2f2);
//draw_set_font(f_namsan_general);
draw_set_font(f_namsan_header);
draw_text_transformed(room_width / 2,  dy + room_height / 2 + 55, "알고 계셨나요?", 0.6, 0.6, 0);

draw_set_color($c68af2);
draw_set_font(f_namsan_header);
var w = string_width("이 스트리머는 배가 고픕니다.");
var h = string_height("이 스트리머는 배가 고픕니다.");
draw_window( spr_dyk_textbar, 0, round(room_width / 2 - w * 0.8 / 2 - 75),  dy + round(room_height / 2 + 110), round(w * 0.8) + 150, h + 15)
draw_text_transformed(room_width / 2,  dy + room_height / 2 + 125, "이 스트리머는 배가 고픕니다.", 0.8, 0.8, 0);

if (phase &amp;&amp; timer &gt;= 0) {
    draw_set_halign(fa_right);
    draw_set_valign(fa_bottom);
    draw_set_color($f2f2f2);
    draw_set_alpha(abs(lengthdir_y(1.2, pass_alpha++))+0.01);
    draw_text_transformed(room_width - 5, room_height - 5, "아무 곳이나 클릭하세요.", 0.5, 0.5, 0);
}
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
